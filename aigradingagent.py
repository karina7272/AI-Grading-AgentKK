# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

# --- AI Grading Agent for Professors (Final Corrected Version) ---

import streamlit as st
import pandas as pd
import openai
import base64
import io
import time

# --- Load API Key Securely ---
openai.api_key = st.secrets["OPENAI_API_KEY"]

# --- Set App Password ---
APP_PASSWORD = st.secrets["APP_PASSWORD"]

# --- Helper Functions ---
def compare_excel_formulas(student_bytes, solution_bytes):
    student_df = pd.read_excel(io.BytesIO(student_bytes), sheet_name=None)
    solution_df = pd.read_excel(io.BytesIO(solution_bytes), sheet_name=None)

    errors = []

    for sheet in student_df.keys():
        if sheet in solution_df:
            student_sheet = student_df[sheet]
            solution_sheet = solution_df[sheet]
            min_rows = min(student_sheet.shape[0], solution_sheet.shape[0])
            min_cols = min(student_sheet.shape[1], solution_sheet.shape[1])

            for row in range(min_rows):
                for col in range(min_cols):
                    student_val = student_sheet.iat[row, col]
                    solution_val = solution_sheet.iat[row, col]

                    if isinstance(student_val, str) and student_val.startswith('='):
                        student_formula = student_val.replace("[1]", "").replace("'", "").replace('"', '')
                    else:
                        student_formula = student_val

                    if isinstance(solution_val, str) and solution_val.startswith('='):
                        solution_formula = solution_val.replace("[1]", "").replace("'", "").replace('"', '')
                    else:
                        solution_formula = solution_val

                    if student_formula != solution_formula:
                        errors.append({
                            "Sheet": sheet,
                            "Cell": f"{row+2},{col+1}",
                            "Student Entry": student_formula,
                            "Correct Entry": solution_formula,
                            "Error Type": "Formula mismatch" if isinstance(student_formula, str) else "Value mismatch"
                        })

    df_errors = pd.DataFrame(errors)
    return df_errors


def generate_feedback(student_name, assignment_goal, rubric_criteria, df_errors):
    prompt = f"""
You are an AI grading assistant.
Student Name: {student_name}
Assignment Goal: {assignment_goal}
Rubric Criteria: {rubric_criteria}

Formula and Value Errors Found:
{df_errors.to_string(index=False)}

Please generate:
- A short introduction.
- What was done well.
- Detailed error explanation.
- Where improvements are needed.
- Overall performance summary.
"""

    retries = 3
    for attempt in range(retries):
        try:
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.4
            )
            return response.choices[0].message.content.strip()
        except openai.error.RateLimitError:
            if attempt < retries - 1:
                time.sleep(5)
            else:
                return "Error: Rate Limit. Please retry later."

# --- Streamlit App Setup ---
st.set_page_config(page_title="AI Grading Agent for Professors", layout="wide")

with st.sidebar:
    st.title("About")
    st.info("""
**AI Grading Agent for Professor by Dr.K**

- Upload assignment instructions, rubric, and student Excel.
- Automatically detect formula and amount errors.
- Generate full personalized feedback using GPT-4o.
""")

    st.title("Help")
    st.success("""
1. Upload assignment/rubric (.txt).
2. Upload student and solution (.xlsx).
3. Enter student name.
4. Click 'Grade Assignment'.
5. Download the feedback!
""")

    st.markdown("""<small>Created by Dr.K ¬© 2025</small>""", unsafe_allow_html=True)

# --- Authentication ---
password = st.text_input("Enter Access Password:", type="password")
if password != APP_PASSWORD:
    st.stop()
else:
    st.success("Access granted. Welcome Professor!")

# --- Background Styling ---
page_bg_img = f'''
<style>
[data-testid="stAppViewContainer"] > .main {{
    background-image: url("https://raw.githubusercontent.com/karina7272/AI-Grading-AgentKK/main/book-background.jpg");
    background-size: cover;
    background-position: center;
}}
</style>
'''

st.markdown(page_bg_img, unsafe_allow_html=True)

# --- Landing Page ---
st.markdown("""
# üéì Welcome to AI Grading Agent for Professors

### Automate your grading with precision, powered by AI.

**Key Features:**
- Upload assignments, rubrics, and student Excel files.
- Automatic formula and value error checking.
- Full personalized student feedback reports.

Developed by **Dr.K** for modern academic needs.
""")

st.button("üöÄ Start Grading Now", on_click=lambda: st.session_state.update(page="grading"))

# --- Main Grading Logic ---
if st.session_state.get("page") == "grading":
    st.header("üìö Grading Dashboard")

    assignment_file = st.file_uploader("Upload Assignment Instructions (.txt)", type=["txt"])
    rubric_file = st.file_uploader("Upload Grading Rubric (.txt)", type=["txt"])
    student_file = st.file_uploader("Upload Student Submission (.xlsx)", type=["xlsx"])
    solution_file = st.file_uploader("Upload Correct Solution Excel (.xlsx)", type=["xlsx"])

    student_name = st.text_input("Student Name")

    if st.button("üöÄ Grade Assignment"):
        if assignment_file and rubric_file and student_file and solution_file and student_name:
            assignment_goal = assignment_file.read().decode("utf-8")
            rubric_criteria = rubric_file.read().decode("utf-8")
            df_errors = compare_excel_formulas(student_file.read(), solution_file.read())

            feedback = generate_feedback(student_name, assignment_goal, rubric_criteria, df_errors)

            st.success("‚úÖ Grading Completed Successfully!")

            st.subheader("üìë Formula and Value Errors Found:")
            st.dataframe(df_errors)

            st.subheader("üìù Personalized Feedback:")
            st.text_area("Feedback Report", value=feedback, height=350)

            st.download_button("üì• Download Feedback as TXT", feedback.encode(), file_name=f"{student_name}_feedback.txt")
        else:
            st.warning("‚ö†Ô∏è Please upload all required files and enter the student name.")

    if st.button("üîí Logout"):
        st.session_state.page = "landing"
        st.experimental_rerun()