# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

import streamlit as st
import openai
import pandas as pd
import io

# --- INITIAL SETUP ---
st.set_page_config(page_title="AI Grading Agent", page_icon="🎓", layout="wide")

# --- SET BACKGROUND ---
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
background-image: url("https://images.unsplash.com/photo-1512295767273-ac109ac3acfa?crop=entropy&cs=tinysrgb&fit=crop&fm=jpg&h=900&q=80&w=1600");
background-size: cover;
background-position: center;
background-repeat: no-repeat;
background-attachment: fixed;
}
[data-testid="stSidebar"] {
background-color: rgba(255, 255, 255, 0.8);
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

# --- SESSION STATE INIT ---
if "page" not in st.session_state:
    st.session_state.page = "landing"

# --- HELPER FUNCTIONS ---

def compare_excel_formulas(student_bytes, solution_bytes):
    student_df = pd.read_excel(io.BytesIO(student_bytes), engine="openpyxl")
    solution_df = pd.read_excel(io.BytesIO(solution_bytes), engine="openpyxl")

    student_formulas = student_df.applymap(lambda x: str(x).strip('=') if isinstance(x, str) else x)
    solution_formulas = solution_df.applymap(lambda x: str(x).strip('=') if isinstance(x, str) else x)

    mismatches = []
    for col in student_formulas.columns:
        for idx in student_formulas.index:
            student_value = student_formulas.at[idx, col]
            solution_value = solution_formulas.at[idx, col]
            if student_value != solution_value:
                mismatches.append({
                    "Row": idx+1,
                    "Column": col,
                    "Student Value": student_value,
                    "Expected Value": solution_value
                })

    return pd.DataFrame(mismatches)

def generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors):
    errors_summary = df_errors.to_string(index=False) if not df_errors.empty else "No formula errors detected."
    prompt = f"""
Student Name: {student_name}
Assignment Goals:
{assignment_goals}

Grading Rubric:
{rubric_criteria}

Detected Formula Errors:
{errors_summary}

Instructions:
- Start with a welcoming sentence.
- Highlight strengths.
- Explain errors clearly.
- Suggest improvements.
- Close with positive encouragement.

Tone: Professional, Supportive, Motivating.
"""
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a supportive AI grading assistant helping professors."},
            {"role": "user", "content": prompt}
        ]
    )
    return response['choices'][0]['message']['content']

def password_protect():
    password = st.text_input("🔒 Enter Access Password:", type="password")
    if password == st.secrets["APP_PASSWORD"]:
        st.success("Access granted. Welcome Professor!")
        return True
    elif password == "":
        return False
    else:
        st.error("❌ Incorrect password. Please try again.")
        return False

# --- LANDING PAGE ---
if st.session_state.page == "landing":
    st.title("🎓 Welcome to AI Grading Agent for Professors")
    st.subheader("Automate your grading with precision, powered by AI.")

    st.markdown("""
    **Key Features:**
    - Upload assignment instructions, rubrics, and student Excel files.
    - Automatic formula and amount error checking.
    - Full personalized student feedback reports.

    Developed by **Dr.K** for modern academic needs.
    """)

    if st.button("🚀 Start Grading Now"):
        st.session_state.page = "password"

# --- PASSWORD PAGE ---
if st.session_state.page == "password":
    if not password_protect():
        st.stop()
    else:
        st.session_state.page = "grading"
        st.experimental_rerun()

# --- MAIN GRADING PAGE ---
if st.session_state.page == "grading":
    st.title("📚 Grading Dashboard")

    assignment_file = st.file_uploader("📄 Upload Assignment Instructions (.txt)", type=["txt"])
    rubric_file = st.file_uploader("📄 Upload Grading Rubric (.txt)", type=["txt"])
    student_file = st.file_uploader("📊 Upload Student Excel Submission (.xlsx)", type=["xlsx"])
    solution_file = st.file_uploader("📊 Upload Correct Solution Excel (.xlsx)", type=["xlsx"])

    student_name = st.text_input("✏️ Enter Student Name:")

    if st.button("🚀 Grade Assignment"):
        if assignment_file and rubric_file and student_file and solution_file and student_name:
            with st.spinner("Grading in progress... Please wait..."):
                assignment_goals = assignment_file.read().decode('utf-8', errors='ignore')
                rubric_criteria = rubric_file.read().decode('utf-8', errors='ignore')
                student_content = student_file.read()
                solution_content = solution_file.read()

                df_errors = compare_excel_formulas(student_content, solution_content)
                feedback = generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors)

                st.success("✅ Grading Completed Successfully!")

                st.subheader("🧮 Formula Errors Found:")
                st.dataframe(df_errors)

                st.subheader("📝 Personalized Feedback:")
                st.text_area("Feedback Report", value=feedback, height=350)

                st.download_button("⬇️ Download Feedback as TXT", feedback.encode(), file_name=f"{student_name}_feedback.txt")

        else:
            st.warning("⚠️ Please upload all required files and enter the student name.")

    if st.button("🔒 Logout"):
        st.session_state.page = "landing"
        st.experimental_rerun()