# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

# --- IMPORT LIBRARIES ---
import streamlit as st
import openpyxl
import pandas as pd
import openai
import re
import io
from io import BytesIO

# --- PAGE SETTINGS ---
st.set_page_config(
    page_title="AI Grading Agent for Professor by Dr.K",
    page_icon=":books:",
    layout="wide",
)

# --- CUSTOM BACKGROUND and STYLE ---
def set_background():
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url("https://images.unsplash.com/photo-1509021436665-8f07dbf5bf1d");
            background-attachment: fixed;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        h1, h2 {
            color: #ffffff;
            text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.7);
        }
        p, li, span, div, label, .stText, .stMarkdown {
            color: #222222;
        }
        .stFileUploader, .stTextInput, .stButton>button, .stDownloadButton>button {
            background-color: rgba(255, 255, 255, 0.9);
            color: #333333;
            border-radius: 10px;
            font-weight: bold;
        }
        .stButton>button:hover, .stDownloadButton>button:hover {
            background-color: #224488;
            color: white;
        }
        .css-18ni7ap.e8zbici2 {
            background: rgba(250, 250, 250, 0.8);
            padding: 1rem;
            border-radius: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

set_background()

# --- SIDEBAR CONTENT ---
with st.sidebar:
    st.title("About")
    st.info("""
    **AI Grading Agent for Professor by Dr.K**

    - Upload assignment, rubric, and student Excel.
    - Automatically detect formula and amount errors.
    - Generate full personalized feedback using GPT-4o.
    """)

    st.title("Help")
    st.warning("""
    1. Upload assignment/rubric (.txt).
    2. Upload student and solution (.xlsx).
    3. Enter student name.
    4. Click 'Grade Assignment'.
    5. Download the feedback!
    """)

    st.markdown("---")
    st.caption("Created by Dr.K ¬© 2025")

# --- SESSION STATE SETUP ---
if "page" not in st.session_state:
    st.session_state.page = "landing"

# --- LOAD API KEY ---
openai.api_key = st.secrets["OPENAI_API_KEY"]

# --- FORMULA CLEANER ---
def clean_formula(formula):
    if formula is None:
        return None
    formula = str(formula)
    formula = re.sub(r"\[[^\]]*\]", "", formula)
    formula = re.sub(r"'[^']*'!", "", formula)
    formula = formula.replace("'", "")
    if '!' in formula:
        formula = formula.split('!')[-1]
    return formula.strip()

# --- FORMULA & VALUE COMPARISON ---
def compare_excel_formulas(student_bytes, solution_bytes):
    student_wb = openpyxl.load_workbook(BytesIO(student_bytes), data_only=False)
    solution_wb = openpyxl.load_workbook(BytesIO(solution_bytes), data_only=False)

    student_ws = student_wb.active
    solution_ws = solution_wb.active

    mismatches = []

    for row in student_ws.iter_rows():
        for student_cell in row:
            solution_cell = solution_ws[student_cell.coordinate]

            student_value = student_cell.value
            solution_value = solution_cell.value

            student_formula = clean_formula(student_cell.value) if student_cell.data_type == 'f' else None
            solution_formula = clean_formula(solution_cell.value) if solution_cell.data_type == 'f' else None

            # Step 1: Compare values first
            if (student_value == solution_value) or (pd.isna(student_value) and pd.isna(solution_value)):
                continue

            # Step 2: If value mismatch, check if formula matches after cleaning
            if student_formula and solution_formula and student_formula == solution_formula:
                continue

            # Step 3: Record mismatch
            mismatches.append({
                "Cell": student_cell.coordinate,
                "Student Value": student_value,
                "Expected Value": solution_value,
                "Student Formula": student_formula,
                "Expected Formula": solution_formula
            })

    return pd.DataFrame(mismatches)

# --- FEEDBACK GENERATOR ---
def generate_feedback(student_name, assignment_goals, rubric_criteria, formula_errors_table):
    errors_summary = formula_errors_table.to_string(index=False)

    prompt = f"""
You are an AI Grading Agent. Write a personalized feedback report for student {student_name}.

Assignment Goals:
{assignment_goals}

Rubric Criteria:
{rubric_criteria}

Formula Errors Found:
{errors_summary}

Instructions:
- Start with a welcoming sentence.
- Highlight strengths.
- Explain errors clearly.
- Suggest improvements.
- Close with positive encouragement.

Tone: Professional, Supportive, Motivating.
"""

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a supportive AI grading assistant helping professors."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

# --- PASSWORD PROTECTION ---
def password_protect():
    password = st.text_input("üîí Enter Access Password:", type="password")
    if password == st.secrets["APP_PASSWORD"]:
        st.success("Access granted. Welcome Professor!")
        return True
    elif password == "":
        return False
    else:
        st.error("‚ùå Incorrect password. Please try again.")
        return False

# --- LANDING PAGE ---
if st.session_state.page == "landing":
    st.title("üéì Welcome to AI Grading Agent for Professors")
    st.subheader("Automate your grading with precision, powered by AI.")

    st.markdown("""
    **Key Features:**
    - Upload assignments, rubrics, and student Excel files.
    - Automatic formula error and amount checking.
    - Full personalized student feedback reports.

    Developed by **Dr.K** for modern academic needs.
    """)

    if st.button("üöÄ Start Grading Now"):
        st.session_state.page = "password"

# --- PASSWORD PAGE ---
elif st.session_state.page == "password":
    if not password_protect():
        st.stop()
    else:
        st.session_state.page = "grading"

# --- MAIN GRADING PAGE ---
if st.session_state.page == "grading":
    st.title("üìö Grading Dashboard")

    assignment_file = st.file_uploader("Upload Assignment Instructions (.txt)", type=["txt"])
    rubric_file = st.file_uploader("Upload Grading Rubric (.txt)", type=["txt"])
    student_file = st.file_uploader("Upload Student Excel Submission (.xlsx)", type=["xlsx"])
    solution_file = st.file_uploader("Upload Correct Solution Excel (.xlsx)", type=["xlsx"])

    student_name = st.text_input("Student Name")

    if st.button("üöÄ Grade Assignment"):
        if assignment_file and rubric_file and student_file and solution_file and student_name:
            with st.spinner("Grading in progress... Please wait..."):
                assignment_goals = assignment_file.read().decode('utf-8', errors='ignore')
                rubric_criteria = rubric_file.read().decode('utf-8', errors='ignore')
                student_content = student_file.read()
                solution_content = solution_file.read()

                df_errors = compare_excel_formulas(student_content, solution_content)
                feedback = generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors)

                st.success("‚úÖ Grading Completed Successfully!")

                st.subheader("üßÆ Formula Errors Found:")
                st.dataframe(df_errors)

                st.subheader("üìù Personalized Feedback:")
                st.text_area("Feedback Report", value=feedback, height=350)

                st.download_button("‚¨áÔ∏è Download Feedback as TXT", feedback.encode(), file_name=f"{student_name}_feedback.txt")

        else:
            st.warning("‚ö†Ô∏è Please upload all required files and enter the student name.")

    if st.button("üîí Logout"):
        st.session_state.page = "landing"
        st.experimental_rerun()