# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

# --- IMPORT LIBRARIES ---
import streamlit as st
import openpyxl
import pandas as pd
import openai
import re
import time
from io import BytesIO

# --- PAGE CONFIGURATION ---
st.set_page_config(
    page_title="AI Grading Agent for Professors by Dr.K",
    page_icon=":books:",
    layout="wide",
)

# --- CUSTOM BACKGROUND AND STYLE ---
def set_background():
    st.markdown(
        """
        <style>
        .stApp {
            background-image: url('https://raw.githubusercontent.com/karina7272/AI-Grading-AgentKK/main/IMG_5764.jpg');
            background-attachment: fixed;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        h1, h2 {
            color: white;
            text-shadow: 2px 2px 8px black;
        }
        p, li, div, label, .stText, .stMarkdown {
            color: #222222;
        }
        .stButton>button, .stDownloadButton>button, .stTextInput>div>div>input {
            background-color: rgba(255,255,255,0.85);
            color: black;
            font-weight: bold;
            border-radius: 10px;
        }
        .stButton>button:hover, .stDownloadButton>button:hover {
            background-color: #004488;
            color: white;
        }
        .stFileUploader>div>div {
            background-color: rgba(255,255,255,0.85);
            border-radius: 10px;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

set_background()

# --- SIDEBAR ---
with st.sidebar:
    st.title("About")
    st.info("""
    **AI Grading Agent for Professor by Dr.K**

    - Upload assignment instructions, rubric, and student Excel.
    - Automatically detect formula and amount errors.
    - Generate full personalized feedback using GPT-4o.
    """)
    st.title("Help")
    st.warning("""
    1. Upload assignment/rubric (.txt).
    2. Upload student and solution (.xlsx).
    3. Enter student name.
    4. Click 'Grade Assignment'.
    5. Download the feedback!
    """)
    st.markdown("---")
    st.caption("Created by Dr.K © 2025")

# --- SESSION SETUP ---
if "page" not in st.session_state:
    st.session_state.page = "landing"

# --- HELPER FUNCTIONS ---
openai.api_key = st.secrets["OPENAI_API_KEY"]

def clean_formula(formula):
    if formula is None:
        return None
    formula = str(formula)
    cleaned = re.sub(r"\[[^\]]*\]", "", formula)
    cleaned = re.sub(r"'[^']*'!", "", cleaned)
    cleaned = cleaned.replace("'", "")
    return cleaned

def determine_error(student_formula, solution_formula, student_value, solution_value):
    if student_formula != solution_formula and student_value != solution_value:
        return "Formula and Value Mismatch"
    elif student_formula != solution_formula:
        return "Formula Mismatch"
    elif student_value != solution_value:
        return "Value Mismatch"
    else:
        return "Correct"

def compare_excel_formulas(student_bytes, solution_bytes):
    student_wb = openpyxl.load_workbook(BytesIO(student_bytes), data_only=False)
    solution_wb = openpyxl.load_workbook(BytesIO(solution_bytes), data_only=False)

    student_values = openpyxl.load_workbook(BytesIO(student_bytes), data_only=True)
    solution_values = openpyxl.load_workbook(BytesIO(solution_bytes), data_only=True)

    results = []

    for s_sheet, sol_sheet, s_val_sheet, sol_val_sheet in zip(
        student_wb.worksheets, solution_wb.worksheets,
        student_values.worksheets, solution_values.worksheets):

        for s_row, sol_row, s_val_row, sol_val_row in zip(
            s_sheet.iter_rows(), sol_sheet.iter_rows(),
            s_val_sheet.iter_rows(), sol_val_sheet.iter_rows()):

            for s_cell, sol_cell, s_val_cell, sol_val_cell in zip(
                s_row, sol_row, s_val_row, sol_val_row):

                s_formula = clean_formula(s_cell.value) if s_cell.data_type == 'f' else None
                sol_formula = clean_formula(sol_cell.value) if sol_cell.data_type == 'f' else None
                s_value = s_val_cell.value
                sol_value = sol_val_cell.value

                if s_formula != sol_formula or s_value != sol_value:
                    results.append({
                        'Cell': s_cell.coordinate,
                        'Student Formula': s_cell.value,
                        'Correct Formula': sol_cell.value,
                        'Student Value': s_value,
                        'Correct Value': sol_value,
                        'Error Type': determine_error(s_formula, sol_formula, s_value, sol_value)
                    })

    return pd.DataFrame(results)

def generate_feedback(student_name, assignment_goals, rubric_criteria, errors_table):
    errors_summary = errors_table.to_string(index=False)

    prompt = f"""
Write a complete personalized feedback report for {student_name}.
Assignment Goals:
{assignment_goals}

Rubric Criteria:
{rubric_criteria}

Errors Found (formula/value mismatches):
{errors_summary}

Instructions:
- Introduction: short welcoming
- Strengths: mention good parts
- Errors: explain clearly
- Improvements: suggest specific steps
- Conclusion: motivate for future learning

Tone: Friendly, Supportive, Motivational, Clear.
    """

    retries = 3
    wait_times = [5, 10, 20]
    for attempt in range(retries):
        try:
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a friendly and highly detailed academic grading assistant."},
                    {"role": "user", "content": prompt}
                ]
            )
            return response.choices[0].message.content
        except openai.error.RateLimitError:
            if attempt < retries - 1:
                wait_time = wait_times[attempt]
                st.warning(f"⚡ API rate limit hit. Retrying after {wait_time} seconds...")
                time.sleep(wait_time)
            else:
                st.error("❌ API Rate limit exceeded. Please retry later.")
                raise

def password_protect():
    password = st.text_input("🔒 Enter Access Password:", type="password")
    if password == st.secrets["APP_PASSWORD"]:
        st.success("Access granted! Welcome, Professor!")
        return True
    elif password == "":
        return False
    else:
        st.error("❌ Incorrect password. Try again.")
        return False

# --- LANDING PAGE ---
if st.session_state.page == "landing":
    st.title("🎓 Welcome to AI Grading Agent for Professors")
    st.subheader("Automate your grading with precision, powered by AI.")

    st.markdown("""
    **Key Features:**
    - Upload assignments, rubrics, and student Excel files.
    - Automatic formula and value error checking.
    - Full personalized student feedback reports.

    Developed by **Dr.K** for modern academic needs.
    """)

    if st.button("🚀 Start Grading Now"):
        st.session_state.page = "password"

# --- PASSWORD PAGE ---
elif st.session_state.page == "password":
    if not password_protect():
        st.stop()
    else:
        st.session_state.page = "grading"

# --- MAIN GRADING PAGE ---
if st.session_state.page == "grading":
    st.title("📚 Grading Dashboard")

    assignment_file = st.file_uploader("Upload Assignment Instructions (.txt)", type=["txt"])
    rubric_file = st.file_uploader("Upload Grading Rubric (.txt)", type=["txt"])
    student_file = st.file_uploader("Upload Student Excel Submission (.xlsx)", type=["xlsx"])
    solution_file = st.file_uploader("Upload Correct Solution Excel (.xlsx)", type=["xlsx"])

    student_name = st.text_input("Student Name")

    if st.button("🚀 Grade Assignment"):
        if assignment_file and rubric_file and student_file and solution_file and student_name:
            with st.spinner("Grading in progress... please wait..."):
                assignment_goals = assignment_file.read().decode('utf-8')
                rubric_criteria = rubric_file.read().decode('utf-8')
                student_content = student_file.read()
                solution_content = solution_file.read()

                df_errors = compare_excel_formulas(student_content, solution_content)
                feedback = generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors)

                st.success("✅ Grading Completed Successfully!")

                st.subheader("🧮 Formula and Value Errors Found:")
                st.dataframe(df_errors)

                st.subheader("📝 Personalized Feedback:")
                st.text_area("Feedback Report", value=feedback, height=400)

                st.download_button("⬇️ Download Feedback as TXT", feedback.encode(), file_name=f"{student_name}_feedback.txt")
        else:
            st.warning("⚠️ Please complete all uploads and enter student name before grading.")

    if st.button("🔒 Logout"):
        st.session_state.page = "landing"
        st.experimental_rerun()