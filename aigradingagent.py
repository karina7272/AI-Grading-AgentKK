# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

import streamlit as st
import pandas as pd
import openpyxl
import openai
import io

# --- SETTINGS ---
st.set_page_config(page_title="AI Grading Agent", layout="wide")
if 'page' not in st.session_state:
    st.session_state.page = "landing"

# --- CLEAN FORMULA FUNCTION ---
def clean_formula(formula):
    if formula is None:
        return None
    if isinstance(formula, str):
        formula = formula.replace('[', '').replace(']', '')
        if '!' in formula:
            formula = formula.split('!')[-1]
        return formula.strip()
    return formula

# --- COMPARE EXCEL FORMULAS ---
def compare_excel_formulas(student_bytes, solution_bytes):
    student_wb = openpyxl.load_workbook(filename=io.BytesIO(student_bytes), data_only=False)
    solution_wb = openpyxl.load_workbook(filename=io.BytesIO(solution_bytes), data_only=False)

    student_ws = student_wb.active
    solution_ws = solution_wb.active

    mismatches = []

    for row in student_ws.iter_rows():
        for cell in row:
            student_cell = cell
            solution_cell = solution_ws[cell.coordinate]

            student_value = student_cell.value
            solution_value = solution_cell.value

            student_formula = clean_formula(student_cell.formula) if student_cell.data_type == 'f' else None
            solution_formula = clean_formula(solution_cell.formula) if solution_cell.data_type == 'f' else None

            if student_value == solution_value:
                continue

            if student_formula and solution_formula and student_formula == solution_formula:
                continue

            mismatches.append({
                "Cell": cell.coordinate,
                "Student Value": student_value,
                "Expected Value": solution_value,
                "Student Formula": student_formula,
                "Expected Formula": solution_formula
            })

    return pd.DataFrame(mismatches)

# --- FEEDBACK GENERATION FUNCTION ---
def generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors):
    prompt = f"""
You are preparing grading feedback.
Student Name: {student_name}
Assignment Goals: {assignment_goals}
Rubric: {rubric_criteria}
Formula and Amount Errors Found:
{df_errors.to_string(index=False)}

Instructions:
- Start with a welcoming sentence.
- Highlight strengths.
- Explain errors clearly.
- Suggest improvements.
- Close with positive encouragement.

Tone: Professional, Supportive, Motivating.
"""

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a supportive AI grading assistant helping professors."},
            {"role": "user", "content": prompt}
        ]
    )
    return response['choices'][0]['message']['content']

# --- PASSWORD PROTECTION ---
def password_protect():
    password = st.text_input("üîí Enter Access Password:", type="password")
    if password == st.secrets["APP_PASSWORD"]:
        st.success("Access granted. Welcome Professor!")
        return True
    elif password == "":
        return False
    else:
        st.error("‚ùå Incorrect password. Please try again.")
        return False

# --- LANDING PAGE ---
if st.session_state.page == "landing":
    st.markdown("""
    <style>
    .stApp {
        background-image: url("https://images.unsplash.com/photo-1522202176988-66273c2fd55f?crop=entropy&cs=tinysrgb&fit=crop&h=800&w=1600");
        background-size: cover;
    }
    </style>
    """, unsafe_allow_html=True)

    st.title("üéì Welcome to AI Grading Agent for Professors")
    st.subheader("Automate your grading with precision, powered by AI.")

    st.markdown("""
    **Key Features:**
    - Upload assignments, rubrics, student Excel files.
    - Automatic formula error and amount checking.
    - Full personalized student feedback reports.

    Developed by **Dr.K** for modern academic needs.
    """)

    if st.button("üöÄ Start Grading Now"):
        st.session_state.page = "password"

# --- PASSWORD PAGE ---
elif st.session_state.page == "password":
    if not password_protect():
        st.stop()
    else:
        st.session_state.page = "grading"

# --- MAIN GRADING PAGE ---
elif st.session_state.page == "grading":
    st.title("üìö Grading Dashboard")

    assignment_file = st.file_uploader("Upload Assignment Instructions (.txt)", type=["txt"])
    rubric_file = st.file_uploader("Upload Grading Rubric (.txt)", type=["txt"])
    student_file = st.file_uploader("Upload Student Excel Submission (.xlsx)", type=["xlsx"])
    solution_file = st.file_uploader("Upload Correct Solution Excel (.xlsx)", type=["xlsx"])

    student_name = st.text_input("Student Name")

    if st.button("üöÄ Grade Assignment"):
        if assignment_file and rubric_file and student_file and solution_file and student_name:
            with st.spinner("Grading in progress... Please wait..."):
                assignment_goals = assignment_file.read().decode('utf-8', errors='ignore')
                rubric_criteria = rubric_file.read().decode('utf-8', errors='ignore')
                student_content = student_file.read()
                solution_content = solution_file.read()

                df_errors = compare_excel_formulas(student_content, solution_content)
                feedback = generate_feedback(student_name, assignment_goals, rubric_criteria, df_errors)

                st.success("‚úÖ Grading Completed Successfully!")

                st.subheader("üßÆ Formula Errors Found:")
                st.dataframe(df_errors)

                st.subheader("üìù Personalized Feedback:")
                st.text_area("Feedback Report", value=feedback, height=350)

                st.download_button("‚¨áÔ∏è Download Feedback as TXT", feedback.encode(), file_name=f"{student_name}_feedback.txt")

        else:
            st.warning("‚ö†Ô∏è Please upload all required files and enter the student name.")

    if st.button("üîí Logout"):
        st.session_state.page = "landing"
        st.experimental_rerun()