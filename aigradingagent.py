# -*- coding: utf-8 -*-
"""AIGradingAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15FWOkdALBzysJyvz36aHNSfDaCwviLBr
"""

# --- Streamlit App for AI Grading Agent for Professors ---

import streamlit as st
import openai
import pandas as pd
import base64
from io import BytesIO

# --- CONFIGURATION ---
st.set_page_config(page_title="AI Grading Agent", layout="wide")

# --- BACKGROUND IMAGE ---
def set_background(image_file):
    with open(image_file, "rb") as img_file:
        img_bytes = img_file.read()
    encoded_img = base64.b64encode(img_bytes).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpeg;base64,{encoded_img}");
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }}
        </style>
        """,
        unsafe_allow_html=True,
    )

set_background("IMG_5764.jpg")  # your uploaded image file

# --- SIDEBAR ---
st.sidebar.title("About")
st.sidebar.markdown(
    "**AI Grading Agent for Professor by Dr.K**\n\n"
    "- Upload assignment instructions, rubric, and student Excel.\n"
    "- Automatically detect formula and amount errors.\n"
    "- Generate full personalized feedback using GPT-4o."
)

st.sidebar.title("Help")
st.sidebar.markdown(
    "1. Upload assignment/rubric (.txt).\n"
    "2. Upload student and solution (.xlsx).\n"
    "3. Enter student name.\n"
    "4. Click 'Grade Assignment'.\n"
    "5. Download the feedback!"
)

st.sidebar.markdown("\nCreated by **Dr.K ¬© 2025**")

# --- LOGIN ---
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

password = st.text_input("Enter Access Password:", type="password")

if password == st.secrets["APP_PASSWORD"]:
    st.session_state.authenticated = True

if not st.session_state.authenticated:
    st.stop()

# --- MAIN DASHBOARD ---
st.markdown("""
    <h1 style='text-align: center; color: white;'>üéì Grading Dashboard</h1>
""", unsafe_allow_html=True)

# Upload files
st.subheader("Upload Assignment Instructions (.txt)")
assignment_file = st.file_uploader("", type=['txt'], key="assignment")

st.subheader("Upload Grading Rubric (.txt)")
rubric_file = st.file_uploader("", type=['txt'], key="rubric")

st.subheader("Upload Student Submission (.xlsx)")
student_file = st.file_uploader("", type=['xlsx'], key="student")

st.subheader("Upload Correct Solution Excel (.xlsx)")
solution_file = st.file_uploader("", type=['xlsx'], key="solution")

st.subheader("Student Name")
student_name = st.text_input("", key="student_name")

# --- GRADING FUNCTION ---
def compare_excel_formulas(student_bytes, solution_bytes):
    student_xl = pd.read_excel(student_bytes, sheet_name=None)
    solution_xl = pd.read_excel(solution_bytes, sheet_name=None)

    errors = []
    for sheet in student_xl:
        if sheet in solution_xl:
            student_df = student_xl[sheet]
            solution_df = solution_xl[sheet]

            for row in range(min(len(student_df), len(solution_df))):
                for col in student_df.columns:
                    try:
                        student_val = student_df.iloc[row][col]
                        solution_val = solution_df.iloc[row][col]
                        if pd.isna(student_val) and pd.isna(solution_val):
                            continue
                        if student_val != solution_val:
                            errors.append({
                                'Sheet': sheet,
                                'Row': row+1,
                                'Column': col,
                                'Student Value': student_val,
                                'Correct Value': solution_val,
                                'Error Type': 'Mismatch'
                            })
                    except Exception:
                        continue
    return pd.DataFrame(errors)

# --- FEEDBACK GENERATION ---
def generate_feedback(student_name, assignment_instructions, rubric, error_table):
    prompt = f"""
    Student: {student_name}

    Assignment Instructions:
    {assignment_instructions}

    Grading Rubric:
    {rubric}

    Formula and Value Errors:
    {error_table.to_string(index=False)}

    Please generate detailed feedback:
    - Strengths.
    - Errors found.
    - Where improvements are needed.
    - Overall performance.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3
    )

    return response.choices[0].message.content.strip()

# --- BUTTON ---
if st.button("üöÄ Grade Assignment"):
    if assignment_file and rubric_file and student_file and solution_file and student_name:
        assignment_text = assignment_file.read().decode()
        rubric_text = rubric_file.read().decode()

        df_errors = compare_excel_formulas(student_file, solution_file)

        feedback = generate_feedback(student_name, assignment_text, rubric_text, df_errors)

        st.success("‚úÖ Grading Completed Successfully!")

        st.subheader("üìã Formula Errors Found:")
        st.dataframe(df_errors)

        st.subheader("üß† Personalized Feedback:")
        st.text_area("Feedback Report", value=feedback, height=300)

        feedback_bytes = feedback.encode()
        st.download_button("‚¨áÔ∏è Download Feedback as TXT", feedback_bytes, file_name=f"{student_name}_feedback.txt")

    else:
        st.warning("‚ö†Ô∏è Please upload all files and enter student name.")

# --- LOGOUT BUTTON ---
if st.button("üîí Logout"):
    st.session_state.authenticated = False
    st.experimental_rerun()